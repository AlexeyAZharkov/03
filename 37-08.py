class Ellipse:
    def __init__(self, *args):
        self.len_ = len(args)
        if len(args) == 4:
            self.x1 = args[0]
            self.y1 = args[1]
            self.x2 = args[2]
            self.y2 = args[3]

    def __bool__(self):
        return bool(self.len_)

    def get_coords(self):
        if bool(self):
            return self.x1, self.y1, self.x2, self.y2
        else:
            raise AttributeError('нет координат для извлечения')


el1 = Ellipse()
el2 = Ellipse(1, 1, 2, 2)
el3 = Ellipse()
el4 = Ellipse(1, 2, 3, 4)
lst_geom = [el1, el2, el3, el4]
for el in lst_geom:
    if bool(el):
        el.get_coords()

        print(el.get_coords())

# print(bool(el2))
# print(el2.get_coords())

'''
Объявите класс Ellipse (эллипс), объекты которого создаются командами:



где x1, y1 - координаты (числа) левого верхнего угла; x2, y2 - координаты (числа) нижнего правого угла. 
Первая команда создает объект класса Ellipse без локальных атрибутов x1, y1, x2, y2. Вторая команда создает объект 
с локальными атрибутами x1, y1, x2, y2 и соответствующими переданными значениями.

В классе Ellipse объявите магический метод __bool__(), который бы возвращал True, если все локальные атрибуты 
x1, y1, x2, y2 существуют и False - в противном случае.

Также в классе Ellipse нужно реализовать метод:

get_coords() - для получения кортежа текущих координат объекта.

Если координаты отсутствуют (нет локальных атрибутов x1, y1, x2, y2), то метод get_coords() должен генерировать исключение командой:

raise AttributeError('нет координат для извлечения')

Сформируйте в программе список с именем lst_geom, содержащий четыре объекта класса Ellipse. Два объекта должны быть созданы командой 

Ellipse()

и еще два - командой:

Ellipse(x1, y1, x2, y2)

Переберите список в цикле и вызовите метод get_coords() только для объектов, имеющих координаты x1, y1, x2, y2. 
(Помните, что для этого был определен магический метод __bool__()).

P.S. На экран ничего выводить не нужно.
'''